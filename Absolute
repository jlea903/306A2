float deg = 45; // Rotation degree
float s = 0;  //Encoder counts
int sm1 = 0;  //Built-in chanel 1
int sm2 = 0;  //Built-in chanel 2
int r = 0;    //indicator for reading builtin encoder to avoid the reading redundancy
float er;     //Proportional error for PI controller
float eri;    //Integral error for PI controller

int valueTop = 0;
int valueBot = 0;
bool top = 0;
bool bot = 0;
bool topOLD = 0;
bool botOLD = 0;

//Values from encoder
String p1 = ";";
bool new_bit4 = 0;
bool new_bit3 = 0;
bool new_bit2 = 0;
bool new_bit1 = 0;
bool new_bit0 = 0;

bool old_bit4 = 0;
bool old_bit3 = 0;
bool old_bit2 = 0;
bool old_bit1 = 0;
bool old_bit0 = 0;

float dir = 45;

int old_value;
int new_value;
float new_displacement = 0;
float home_displacement = 0;
float total_displacement = 0;

int t = 0;  //time in ms
int t0 = 0; //memory for time in ms
int exitt = 0;     //mainloop exit condition

int finish = 0; //finish indicator
int rep = 1;   //Repetition indicator




void setup() {

  Serial.begin(250000);                                                 //Baud rate of communication
  Serial.println("Enter the desired rotation in degree.");

  while (Serial.available() == 0)                                       //Obtaining data from user
  {
    //Wait for user input
  }

  deg = Serial.readString().toFloat(); //Reading the Input string from Serial port.

  if (deg < 0)
  {
    analogWrite(3, 255);                                                  //change the direction of rotation by applying voltage to pin 3 of arduino
  }
  deg = abs(deg);
}


float kp = .6 * 90 / deg;                     //proportional gain of PI
float ki = .02;                               //integral gain of PI




void loop() {
  // put your main code here, to run repeatedly:

  //converting analog inputs to binary
  old_bit4 = signalConversion(analogRead(A4), old_bit4); //most significant bit
  old_bit3 = signalConversion(analogRead(A3), old_bit3);
  old_bit2 = signalConversion(analogRead(A2), old_bit2);
  old_bit1 = signalConversion(analogRead(A1), old_bit1);
  old_bit0 = signalConversion(analogRead(A0), old_bit0);

  old_value = greyToDecimal5Bit(old_bit0, old_bit1, old_bit2, old_bit3, old_bit4); //convert grey code to decimal

  t = millis();               //reading time
  t0 = t;                     //sving the current time in memory
  while (t < t0 + 4000 && rep <= 10)                                  //let the code to ran for 4 seconds each with repetitions of 10
  {

    if (t % 10 == 0)                                  //PI controller that runs every 10ms
    {
      if (s < deg * 114 * 2 / 360)
      {
        er = deg - s * 360 / 228;
        eri = eri + er;
        analogWrite(6, kp * er + ki * eri);
      }

      if (s >= deg * 228 / 360)
      {
        analogWrite(6, 0);
        eri = 0;
      }
      delay(1);
    }

    sm1 = digitalRead(7);         //reading chanel 1
    sm2 = digitalRead(8);         //reading chanel 2


    if (sm1 != sm2 && r == 0) {                                      //counting the number changes for both chanels
      s = s + 1;
      r = 1;                                                         // this indicator wont let this condition, (sm1 != sm2), to be counted until the next condition, (sm1 == sm2), happens
    }
    if (sm1 == sm2 && r == 1) {
      s = s + 1;
      r = 0;                                                         // this indicator wont let this condition, (sm1 == sm2), to be counted until the next condition, (sm1 != sm2), happens
    }

    //converting analog inputs to binary
    new_bit4 = signalConversion(analogRead(A4), new_bit4); //most significant bit
    new_bit3 = signalConversion(analogRead(A3), new_bit3);
    new_bit2 = signalConversion(analogRead(A2), new_bit2);
    new_bit1 = signalConversion(analogRead(A1), new_bit1);
    new_bit0 = signalConversion(analogRead(A0), new_bit0);

    new_value = greyToDecimal5Bit(new_bit0, new_bit1, new_bit2, new_bit3, new_bit4); //convert grey code to decimal

    t = millis();         //updating time
    finish = 1;           //cghanging finish indicator

  }
   
    //save and update top and bottom values
    topOLD = top;
    top = signalConversion(valueTop); //convert analog input to binary value
    botOLD = bot;
    bot = signalConversion(valueBot);

    if (topOLD==0 && botOLD==0 && top==1) { //check to see if 00 appears after 01 or 10 to check direction
      dir = 1; //1 = CCW
    } else if (topOLD==0 && botOLD==0 && bot==1) {
      dir = 0;
    }

  if (finish == 1) {                             //this part of the code is for displaying the result

    if (dir < 0) { //Else movement is CCW if deg is less than 0
      if ((new_value - old_value) > 0) { //If no overflow new value should be larger than old value
        new_displacement = (new_value - old_value) * 11.25;
      } else { //Case with overflow
        new_displacement = ((new_value + 31) - old_value ) * 11.25;
      }
    } else {  //Check direction of rotation - CW if deg is greater than 0
      if ((old_value - new_value) > 0) { //If no overflow old value should be larger than new value
        new_displacement = abs((new_value - old_value) * 11.25);
      } else {//Case with overflow
        new_displacement = abs((new_value - (old_value + 31)) * 11.25);
      }
    }

    home_displacement =  new_displacement + home_displacement;     // Record total displacement from home position

    delay(500);                              //half second delay
    rep = rep + 1;                           // increasing the repetition indicator
    Serial.print("shaft possition from optical absolute sensor from home position: ");
    Serial.println(home_displacement);

    Serial.print("shaft displacement from optical absolute sensor: ");
    Serial.println(new_displacement);
    Serial.print("direction read by sensor:  ");
    if (dir < 0) {
      Serial.println("CCW");
    }
    else {
      Serial.println("CW");
    }

    Serial.print("Shaft displacement from motor's builtin encoder: ");
    Serial.println(s * 360 / 228);                                      //every full Revolution of the shaft is associated with 228 counts of builtin
    //encoder so to turn it to degre we can use this formula (s * 360 / 228), "s" is the number of  built-in encoder counts

    float Error = (new_displacement - s * 360 / 228);
    Serial.print("Error :");
    Serial.println(Error);                                              //displaying error
    Serial.println();



    s = 0;
    finish = 0;
  }


  analogWrite(6, 0);   //turning off the motor
}

bool signalConversion(int value, bool old) {
  if (value >= 200) { //threshold value of 200 as the low signal was around 50 and the high signal was around 350
    return 1; //if signal above 200, it is white
  } else if (value <= 100) {
    return 0;
  } else {
    return old;
  }
}

int binaryToDecimal(bool bit0, bool bit1, bool bit2, bool bit3, bool bit4) { //x4 is most significant bit
  return bit0 * 1 + bit1 * 2 + bit2 * 4 + bit3 * 8 + bit4 * 16;
}

bool XOR (bool x1, bool x2) { //exclusive or function
  if ((x1 && !x2) || (!x1 && x2)) {
    return 1;
  }
  else {
    return 0;
  }
}

int greyToDecimal5Bit(bool grey0, bool grey1, bool grey2, bool grey3, bool grey4) { //x4 is most significant bit
  bool bin4 = grey4;
  bool bin3 = XOR(bin4, grey3);
  bool bin2 = XOR(bin3, grey2);
  bool bin1 = XOR(bin2, grey1);
  bool bin0 = XOR(bin1, grey0);

  return binaryToDecimal(bin0, bin1, bin2, bin3, bin4);
}
